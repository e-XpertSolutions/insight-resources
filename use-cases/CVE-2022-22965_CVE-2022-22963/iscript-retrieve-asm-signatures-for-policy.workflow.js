var http    = require('http');
var secret  = require('insight/secret');
var kvstore = require('insight/kvstore');
var time    = require('time');

// See: https://support.f5.com/csp/article/K24912123
var SPRING4SHELL_SIGNATURES = ['200003437', '200003438', '200003439', '200003443', '200003444', '200003445', '200004161', '200004453', '200104262', '200104263', '200104796', '200104797', '200104798', '200104799'];

var STORE_NAME = 'asm-policy-signatures-spring4shell';

var pwd = secret.get('f5-admin-i5800a-1');

// Wrapper for F5 clients in order to support greater timeout.
function F5Client(url, user, password) {
    this._url      = url;
    this._user     = user;
    this._password = password;
    this._timeout  = null;
    
    this.restCall = function(method, uri) {
        var req = new http.Request(method, this._url + uri);
        req.setTlsVerify(false);
        req.setBasicAuth(this._user, this._password);
        
        if (this._timeout !== null) {
            req.setTimeout(this._timeout);
        }
        
        return req.send();
    };
    
    this.setTimeout = function(dur) {
        this._timeout = dur;
    };
}

function execute(event) {
    var conn = new F5Client('https://' + event.host, 'admin', pwd);
    conn.setTimeout('30s');
    
    var sigs = retrieveSignatures(conn, event.policy_id);
    
    var data = {
        policy_name: event.name,
        host_name: event.host,
        policy_id: event.policy_id,
        missing_signatures: false,
        protection_level: 'unknown'
    }
    
    if (sigs.length === 0) {
        data.missing_signatures = true;
    }
    
    var totalEnabled = 0;
    for (var i = 0; i < sigs.length; i++) {
        var sig = sigs[i];
        if (sig.enabled) {
            totalEnabled++;
        }
    }
    if (totalEnabled === 0) {
        data.protection_level = 'none';
    } else if (totalEnabled === sigs.length) {
        data.protection_level = 'full';
    } else {
        data.protection_level = 'partial';
    }
    
    var store = kvstore.get(STORE_NAME);
    store.set(data.policy_name + '__' + data.host_name, data);
}

function retrieveSignatures(conn, policyId) {
    var sigsStr = SPRING4SHELL_SIGNATURES.join("','");

    var resp = conn.restCall('GET', '/mgmt/tm/asm/policies/' + policyId + '/signatures?$expand=signatureReference&$filter=inPolicy+eq+true+and+signature/signatureId+in+(\'' + sigsStr + '\')&$select=id,enabled,signature/signatureId');
    if (resp.status !== 200) {
        return [];
    }
    
    var jsonData = JSON.parse(resp.body);
    return jsonData.items;
}
