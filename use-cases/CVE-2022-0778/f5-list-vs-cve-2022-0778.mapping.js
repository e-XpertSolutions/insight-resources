var f5     = require('f5');
var logger = require('logger');
var secret = require('insight/secret');

var LOG_PREFIX = '[mappings/f5-list-vs-cve-2022-0778] ';

function map(args) {
    if (args.length < 1) {
        logger.error(LOG_PREFIX + 'missing arguments');
        return [];
    }
    
    var deviceName = args[0];
    var listFilter = 'Only Vulnerable';
    if (args.length > 1) {
        listFilter = args[1];
    }
    
    var client = new f5.BasicClient('https://' + deviceName + '.labo.example.lan', 'admin', secret.get('f5-user-insight'));
    
    var vulnList = buildVulnerableProfilesList(client);
    if (!vulnList && listFilter !== 'All') {
        return [];
    }
    
    var resp = client.restCall('GET', '/mgmt/tm/ltm/virtual?expandSubcollections=true');
    if (resp.status !== 200) {
        logger.error(LOG_PREFIX + 'cannot retrieve list of virtual servers: ' + JSON.stringify(resp));
        return;
    }
    
    var data = JSON.parse(resp.body);
    
    var vsList = [];
    for (var i = 0; i < data.items.length; i++) {
        var item = data.items[i];
        if (!item.profilesReference || !item.profilesReference.items) {
            continue;
        }
        var isVuln = false;
        for (var j = 0; j < item.profilesReference.items.length; j++) {
            var profile = item.profilesReference.items[j];
            if (!profile.nameReference || !profile.nameReference.link) {
                continue;
            }
            if (!profile.nameReference.link.indexOf('/client-ssl/') === -1) {
                continue;
            }
            if (vulnList.indexOf(profile.fullPath) !== -1) {
                isVuln = true;
                break;
            }
        }
        if (isVuln || listFilter === 'All') {
            vsList.push({
                name: item.name,
                fullPath: item.fullPath,
                partition: item.partition,
                description: item.description,
                destination: item.destination.replace('/Common/', ''),
                cmpEnabled: item.cmpEnabled,
                enabled: item.enabled,
                vulnerable: isVuln
            });
        }
    }
    return vsList;
}

function buildVulnerableProfilesList(client) {
    var resp = client.restCall('GET', '/mgmt/tm/ltm/profile/client-ssl');
    if (resp.status !== 200) {
        logger.error(LOG_PREFIX + 'cannot retrieve list of client-ssl profiles: ' + JSON.stringify(resp));
        return null;
    }
    
    var data = JSON.parse(resp.body);
    
    var vulnList = [];
    for (var i = 0; i < data.items.length; i++) {
        var item = data.items[i];
        if (item.peerCertMode === 'require' || item.peerCertMode === 'request') {
            vulnList.push(item.fullPath);
        }
    }
    return vulnList.join(',');
}

function onClose() {
}
